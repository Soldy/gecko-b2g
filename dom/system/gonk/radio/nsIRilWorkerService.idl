/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIRilIndicationResult.idl"
#include "nsIRilResponseResult.idl"
#include "nsIDataCallInterfaceService.idl"

interface nsIRilIndicationResult;
interface nsIRilResponseResult;

[scriptable, uuid(58e8a1cb-cab7-490d-9301-5c66b36ecf6b)]
interface nsIRilCallback : nsISupports
{
  void handleRilResponse(in nsIRilResponseResult response);
  void handleRilIndication(in nsIRilIndicationResult response);
};

[scriptable, uuid(96d07089-9800-4600-9df6-a50de9d7eea8)]
interface nsIRilWorker : nsISupports
{
  void sendRilRequest(in jsval message);
  void initRil(in nsIRilCallback callback);
  void setRadioPower(in long serial, in boolean enabled);
  void getDataCallList(in long serial);
  void getVoiceRegistrationState(in long serial);
  void getDataRegistrationState(in long serial);
  void getOperator(in long serial);
  void getNetworkSelectionMode(in long serial);
  void getSignalStrength(in long serial);
  void getVoiceRadioTechnology(in long serial);
  void reportSmsMemoryStatus(in long serial, in boolean available);
  void getIccCardStatus(in long serial);
  void setCellInfoListRate(in long serial, [optional] in long rateInMillis);
  void getDeviceIdentity(in long serial);
  void setDataAllowed(in long serial, in boolean allowed);
  void getBasebandVersion(in long serial);
  void setUiccSubscription(in long serial, in long slotId, in long appIndex, in long subId
                           , in long subStatus);
  void setMute(in long serial, in boolean enableMute);
  void getMute(in long serial);
  void getSmscAddress(in long serial);
  void requestDial(in long serial, in AString address, in long clirMode, in long uusType, in long uusDcs
                   , in AString uusData);
  void getCurrentCalls(in long serial);
  void hangupConnection(in long serial, in long callIndex);
  void hangupWaitingOrBackground(in long serial);
  void hangupForegroundResumeBackground(in long serial);
  void switchWaitingOrHoldingAndActive(in long serial);
  void conference(in long serial);
  void getLastCallFailCause(in long serial);
  void acceptCall(in long serial);
  void setPreferredNetworkType(in long serial, in long networkType);
  void getPreferredNetworkType(in long serial);
  void setNetworkSelectionModeAutomatic(in long serial);
  void setNetworkSelectionModeManual(in long serial, in AString operatorNumeric);
  void getAvailableNetworks(in long serial);
  void setInitialAttachApn(in long serial, in nsIDataProfile profile, in boolean isRoaming);
  void setDataProfile(in long serial, in Array<nsIDataProfile> profileList, in boolean isRoaming);
  void setupDataCall(in long serial, in long radioTechnology, in nsIDataProfile profile
                     , in boolean isRoaming, in boolean allowRoaming);
  void deactivateDataCall(in long serial, in long cid, in long reason);
  void getCellInfoList(in long serial);
  void getIMSI(in long serial, in AString aid);
  void iccIOForApp(in long serial, in long command, in long fileId
                   , in AString path, in long p1, in long p2, in long p3
                   , in AString data, in AString pin2, in AString aid);
  void getClir(in long serial);
  void setClir(in long serial, in long clirMode);
  void sendDtmf(in long serial, in AString dtmfChar);
  void startDtmf(in long serial, in AString dtmfChar);
  void stopDtmf(in long serial);
  void rejectCall(in long serial);
  void sendUssd(in long serial, in AString ussd);
  void cancelPendingUssd(in long serial);
  void getCallForwardStatus(in long serial, in long cfReason, in long serviceClass
                            , in AString number, in long toaNumber);
  void setCallForwardStatus(in long serial, in long action, in long cfReason
                            , in long serviceClass, in AString number, in long toaNumber);
  void getCallWaiting(in long serial, in long serviceClass);
  void setCallWaiting(in long serial, in boolean enable, in long serviceClass);
  void setBarringPassword(in long serial, in AString facility, in AString oldPwd, in AString newPwd);
  void separateConnection(in long serial, in long gsmIndex);
  void getClip(in long serial);
  void explicitCallTransfer(in long serial);
  void getNeighboringCids(in long serial);
  void setTTYMode(in long serial, in long ttyMode);
  void queryTTYMode(in long serial);
  void exitEmergencyCallbackMode(in long serial);
  void supplyIccPinForApp(in long serial, in AString pin, in AString aid);
  void supplyIccPin2ForApp(in long serial, in AString pin, in AString aid);
  void supplyIccPukForApp(in long serial, in AString puk, in AString newPin, in AString aid);
  void supplyIccPuk2ForApp(in long serial, in AString puk, in AString newPin, in AString aid);
  void setFacilityLockForApp (in long serial, in AString facility, in boolean lockState
                              , in AString password, in long serviceClass, in AString aid);
  void getFacilityLockForApp (in long serial, in AString facility
                              , in AString password, in long serviceClass, in AString aid);

  void changeIccPinForApp(in long serial, in AString oldPin, in AString newPin, in AString aid);
  void changeIccPin2ForApp(in long serial, in AString oldPin, in AString newPin, in AString aid);
  void reportStkServiceIsRunning(in long serial);

  void setGsmBroadcastActivation(in long serial, in boolean activate);
  void setGsmBroadcastConfig(in long serial, in Array<long> ranges);

  void getPreferredVoicePrivacy(in long serial);
  void setPreferredVoicePrivacy(in long serial, in boolean enable);
  void requestIccSimAuthentication(in long serial, in long authContext, in AString data, in AString aid);
  void getRadioCapability(in long serial);
  void sendSMS(in long serial, in AString smsc, in AString pdu);
  void acknowledgeLastIncomingGsmSms(in long serial, in boolean success, in long cause);
  void setSuppServiceNotifications(in long serial, in boolean enable);
  void handleStkCallSetupRequestFromSim(in long serial, in boolean accept);
  void sendTerminalResponseToSim(in long serial, in AString contents);
  void sendEnvelope(in long serial, in AString contents);
};

/**
 * XPCOM component that provides the hidl broadcast information.
 */
[scriptable, uuid(4e0a3d8f-029b-435e-a673-c20c4dd03f83)]
interface nsIRilWorkerService: nsISupports
{
  nsIRilWorker getRilWorker(in unsigned long clientId);
};

%{C++
#define RILWORKERSERVICE_CID \
  { 0xce79588b, 0x53e6, 0x4212, { 0x98, 0x55, 0x36, 0xfe, 0x6b, 0xdc, 0x78, 0xd4 } }
#define RILWORKERSERVICE_CONTRACTID \
  "@mozilla.org/rilworkerservice;1"
%}
